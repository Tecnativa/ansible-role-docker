- name: get swarm host lists
  set_fact:
    docker_swarm_manager_hosts:
      "{{ query('inventory_hostnames', docker_swarm_managers_pattern) }}"
    docker_swarm_worker_hosts:
      "{{ query('inventory_hostnames', docker_swarm_workers_pattern) }}"

- name: get hosts that are both managers and workers
  set_fact:
    docker_swarm_repeated_hosts:
      "{{ docker_swarm_manager_hosts|intersect(docker_swarm_worker_hosts) }}"

- name: ensure no host is defined as manager and worker
  assert:
    that: not docker_swarm_repeated_hosts
    msg: >
      Found some hosts ({{ docker_swarm_repeated_hosts|join(", ") }}) that are configured
      both as swarm managers and workers because they match both patterns
      ({{ docker_swarm_managers_pattern }} and
      {{ docker_swarm_workers_pattern }}).
      Fix that and retry. Aborting.

- import_tasks: facts.yml

- name: get all cluster ids
  set_fact:
    docker_swarm_clusters: "{{
      docker_swarm_clusters|d([])|
      union([hostvars[item].docker_info.Swarm.Cluster.ID|d('')])
    }}"
  loop: "{{ docker_swarm_manager_hosts }}"
  when: "'Cluster' in hostvars[item].docker_info.Swarm"

- name: get unique manager cluster ids
  set_fact:
    docker_swarm_clusters:
      "{{ docker_swarm_clusters|d([])|unique|difference(['']) }}"

- name: ensure we are not working with several clusters
  assert:
    that: docker_swarm_clusters|length < 2
    msg: >
      Swarm managers belong to {{ docker_swarm_clusters|length }}
      different clusters.
      There should be only only zero or one swarm clusters involved
      between all the hosts that match the specified pattern
      ({{ docker_swarm_managers_pattern }}),
      or otherwise I cannot know to which
      cluster must I join the other nodes! Fix that and retry. Aborting.

- name: init a new docker swarm
  command: >
    docker swarm init --advertise-addr
    {{ docker_swarm_advertise_address|quote }}
  when:
    - not docker_swarm_clusters
    - "{{ docker_swarm_manager_hosts|length > 0 and inventory_hostname == docker_swarm_manager_hosts|first if 'ubuntu2204' in group_names else inventory_hostname == docker_swarm_manager_hosts|first }}"

- import_tasks: facts.yml

- name: share necessary swarm facts
  set_fact:
    docker_swarm_token_manager:
      "{{ docker_swarm_token_manager or
          hostvars[item].docker_swarm_token_manager }}"
    docker_swarm_token_worker:
      "{{ docker_swarm_token_worker or
          hostvars[item].docker_swarm_token_worker }}"
    docker_swarm_expected_manager:
      "{{ docker_swarm_expected_manager|d('') or
          hostvars[item].docker_info.Swarm.NodeID }}"
  loop: "{{ docker_swarm_manager_hosts }}"

- name: leave alien swarms
  import_tasks: leave.yml
  when:
    - docker_info.Swarm.LocalNodeState == 'active'
    - docker_info.Swarm.NodeID != docker_swarm_expected_manager
    - docker_swarm_expected_manager not in
      docker_info.Swarm.RemoteManagers|map(attribute='NodeID')

- name: get swarm join command for managers
  set_fact:
    docker_swarm_join_command: "{{ docker_swarm_token_manager }}"
  when:
    - inventory_hostname in docker_swarm_manager_hosts
    - docker_info.Swarm.LocalNodeState == 'inactive'

- name: get swarm join command for workers
  set_fact:
    docker_swarm_join_command: "{{ docker_swarm_token_worker }}"
  when:
    - inventory_hostname in docker_swarm_worker_hosts
    - docker_info.Swarm.LocalNodeState == 'inactive'

- name: join docker swarm
  command: "{{ docker_swarm_join_command }}"
  register: result
  changed_when: "'This node joined a swarm' in result.stdout"
  when:
    - docker_swarm_join_command is defined

- import_tasks: facts.yml

- name: list swarm nodes
  command: docker node ls --quiet
  register: swarm_nodes
  changed_when: false
  when:
    - docker_info.Swarm.ControlAvailable

- name: promote swarm managers
  command: docker node promote {{ item.0 }}
  register: result
  changed_when: "'promoted' in result.stdout"
  loop: "{{ query(
    'nested',
    swarm_nodes.stdout_lines,
    docker_swarm_manager_hosts,
  ) }}"
  when:
    - docker_info.Swarm.ControlAvailable
    - item.0 == hostvars[item.1].docker_info.Swarm.NodeID

- name: demote swarm workers
  command: docker node demote {{ item.0 }}
  register: result
  changed_when: "'demoted' in result.stdout"
  loop: "{{ query(
    'nested',
    swarm_nodes.stdout_lines,
    docker_swarm_worker_hosts,
  ) }}"
  when:
    - docker_info.Swarm.ControlAvailable
    - item.0 == hostvars[item.1].docker_info.Swarm.NodeID
